sdadadads
public int calculate(String s) {
        List<String> expression = new ArrayList<String>();
        boolean flag = false;
        int val = 0;
        for(int i = 0; i < s.length(); i++) {
            char elem = s.charAt(i);
            if (elem == ' ') {
                continue;
            }
            if (elem == '+' || elem == '-' || elem == '*' || elem == '/' || elem == '(' || elem == ')') {
                if (flag) {
                    expression.add(String.valueOf(val)); 
                }
                expression.add("" + elem);
                flag = false;
                val = 0;
            }
            else {
                if (!flag) {
                    flag = true;
                    val = 0;
                }
                val = val * 10 + (elem - '0');
            }
        }
        if (flag) {
            expression.add(String.valueOf(val));
        }
        int num = evaluateExpression(expression);
        return num;
    }
private static int evaluateExpression(List<String> expression, int start, int end) {
        if (start > end) {
            return 0;
        }
        if (start == end) {
            return Integer.parseInt(expression.get(start));
        }
        int parens = 0;
        int total = 0;
        String lastOperator = "+";
        int lastIndex = start;
        boolean canDivide = false;
        for (int index = start; index <= end; index++) {
            String elem = expression.get(index);
            if (parens == 0 && (elem.equals("+") || elem.equals("-"))) {
                canDivide = true;
                int val = evaluateExpression(expression, lastIndex, index - 1);
                total = calc(total, lastOperator, val);
                lastOperator = elem;
                lastIndex = index + 1;
            }
            else if (elem.equals("(")) {
                parens += 1;
            }
            else if (elem.equals(")")) {
                parens -= 1;
            }
        }
        if (canDivide) {
            int val = evaluateExpression(expression, lastIndex, end);
            total = calc(total, lastOperator ,val);
            return total;
        }
        total = evaluateExpression(expression, start + 1, end - 1);
        return total;
    }
    private static int calc (int a, String operator, int b) {
        if (operator.equals("+")) {
            return a + b;
        }
        if (operator.equals("-")) {
            return a - b;
        }
        if (operator.equals("*")) {
            return a * b;
        }
        return a / b;
    }

  public int evaluateExpression(List<String> expression) {
        List<String> temp = new ArrayList<>();
        temp.add("(");
        for (int i = 0; i < expression.size(); i++) {
            temp.add(expression.get(i));
        }
        temp.add(")");
        expression = temp;
        Stack<String> stack = new Stack<>();
        for (int i = 0; i < expression.size(); i++) {
            String elem = expression.get(i);
            if (elem.equals(")")) {
                List<String> subExpression = popUntileLeftParen(stack);
                int val = evaluateExpressionWithoutParentheses(subExpression);
                stack.push(String.valueOf(val));
            }
            else {
                stack.push(elem);
            }
        }
        return Integer.parseInt(stack.peek());
    }
    public List<String> popUntileLeftParen(Stack<String> stack) {
        List<String> expression = new ArrayList<>();
        while (!stack.peek().equals("(")) {
            expression.add(stack.pop());
        }
        stack.pop();
        List<String> temp = new ArrayList<>();	
        for (int i = expression.size() - 1; i >= 0; i--) {
            temp.add(expression.get(i));
        }
        expression = temp;
        return expression;
    }
    private int evaluateExpressionWithoutParentheses(List<String> expression) {
        int total = Integer.parseInt(expression.get(0));
        int index = 2;
        while (index < expression.size()) {
            total = calc(total, expression.get(index - 1), Integer.parseInt(expression.get(index)));
            index += 2;
        }
        return total;
    }
    
    private static CanDivideAndTotal divideExpression(List<String> expression, List<String> operators) {
        int lastIndex = 0;
        int parens = 0;
        String lastOperator = operators.get(0);
        
        int total =  lastOperator.equals("*") ? 1 : 0;
        boolean canDivide = false;
        
        for (int index = 0; index < expression.size(); index++) {
            String elem = expression.get(index);
            if ( (elem.equals(operators.get(0)) || elem.equals(operators.get(1)))  && parens == 0) {
                canDivide = true;
                List<String> temp = new ArrayList<String>();
                for (int j = lastIndex; j < index; j++) {
                    temp.add(expression.get(j));
                }
                int val = evaluateExpression(temp);
                total = calc(total, lastOperator, val);
                lastOperator = elem;
                lastIndex = index + 1;
            }
            else if (elem.equals("(")) {
                parens += 1;
            }
            else if (elem.equals(")")) {
                parens -= 1;
            }
        }
        if (canDivide) {
            List<String> temp = new ArrayList<String>();
            for (int i = lastIndex; i < expression.size(); i++) {
                temp.add(expression.get(i));
            }
            int val = evaluateExpression(temp);
            total = calc(total, lastOperator, val);
        }
        CanDivideAndTotal c = new CanDivideAndTotal(total, canDivide);
        return c;
    }
    private static int evaluateExpression(List<String> expression) {
         if (expression == null) {
             return 0;
         }
         if (expression.size() == 1) {
             return Integer.parseInt(expression.get(0));
         }
         List<String> operators1 = new ArrayList<>();
         operators1.add("+");
         operators1.add("-");
         CanDivideAndTotal canDivideAndTotal = divideExpression(expression, operators1);
         boolean canDivide = canDivideAndTotal.can_divide;
         int total = canDivideAndTotal.total;
         if (canDivide) {
             return total;
         }
         List<String> operators2 = new ArrayList<>();
         operators2.add("*");
         operators2.add("/");
         canDivideAndTotal = divideExpression(expression, operators2);
         canDivide = canDivideAndTotal.can_divide;
         total = canDivideAndTotal.total;
         if (canDivide) {
             return total;
         }
         List<String> temp = new ArrayList<>();
         for (int i = 1; i < expression.size(); i++) {
             temp.add(expression.get(i));
         }
         return evaluateExpression(temp);   
    }

class CanDivideAndTotal {
    public int total;
    public boolean can_divide;
    public CanDivideAndTotal (int a, boolean b) {
        this.total = a;
        this.can_divide = b;
    }
}
 def postifx_expression_result(self, expression):
        stack = []
        for elem in expression:
            if elem not in['+', '-', '*', '/']:
                stack.append(int(elem))
            else:
                val = stack.pop(-1);
                val = calc(stack.pop(-1), elem, val)
                stack.append(val)
        return stack[0]


private int evaluateExpression(List<String> expression) {
        expression.add("#");
        Stack<String> stack = new Stack<String>();
        List<String> rpe = new ArrayList<String>();
        for (int i = 0; i < expression.size(); i++) {
            String elem = expression.get(i);
            if (elem.equals("(")) {
                stack.push(elem);
            }
            else if(elem.equals(")")) {
                while(!stack.isEmpty() && !stack.peek().equals("(")) {
                    String operator = stack.pop();
                    rpe.add(operator);
                }
                stack.pop();
            }
            else if (elem.equals("+") || elem.equals("*") || elem.equals("-") || elem.equals("/") || elem.equals("#")){
                while(!stack.isEmpty() && PRIORITY(stack.peek()) >= PRIORITY(elem)) {
                    String operator = stack.pop();
                    rpe.add(operator);
                }
                stack.push(elem);
            }
            else {
                rpe.add(elem);
            }
        }
        return evaluate_reverse_polish_expression(rpe);
    }
    
    private int evaluate_reverse_polish_expression(List<String> expression) {
        Stack<String> stack = new Stack<String>();
        for (int i = 0; i < expression.size(); i++) {
            String elem = expression.get(i);
            if (elem.equals("+") || elem.equals("*") || elem.equals("-") || elem.equals("/")) {
                int b = Integer.parseInt(stack.pop());
                int a = Integer.parseInt(stack.pop());
                stack.push(String.valueOf(calc(a, elem, b)));
            }
            else {
                stack.push(elem);
            }
        }
        return Integer.parseInt(stack.peek());
   }
        
class Solution:
    """
    @param s: the given expression
    @return: the result of expression
    """
    def calculate(self, s):
        # Write your code here
        expression = []
        val = None
        for char in s:
            if char == ' ':
                continue
            if char in ['+', '-', '*', '/', '(', ')']:
                if val is not None:
                    expression.append(str(val))
                expression.append(char)
                val = None
            else:
                if val is None:
                    val = 0
                val = val * 10 + ord(char) - ord('0')
        if val is not None:
            expression.append(str(val))    
        return self.evaluate_expression(expression)
        
        
    def evaluate_expression(self, expression):
        expression = ['(', *expression, ')']
        stack = []
        for elem in expression:
            if elem == ')':
                sub_expression = self.pop_until_left_paren(stack)
                val = self.evaluate_expression_without_parentheses(sub_expression)
                stack.append(val)
            else:
                stack.append(elem)
        return int(stack[0])
        
    def pop_until_left_paren(self, stack):
        expression = []
        while stack[-1] != '(':
            expression.append(stack.pop())
        stack.pop()
        return expression[::-1]
    def evaluate_expression_without_parentheses(self, expression):
        total = int(expression[0])
        index = 2
        while index < len(expression):
            total = self.calc(total, expression[index - 1], int(expression[index]))
            index += 2
        return total
        
    def calc(self, a, operator, b):
        if operator == '+':
            return a + b
        elif operator == '-':
            return a - b
        elif operator == '*':
            return a * b
        else:
            return a // b
        
        
    
